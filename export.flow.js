/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare module 'debug/src/node' {
    declare var val: any;
    declare module.exports: typeof val
}
declare var IS_BROWSER: boolean;
declare var Reactotron: any;
declare module 'redux-domainngs/decorators/internal/isGenerator' {
    declare export default function isGenerator(variable: {}): boolean
}
declare module 'redux-domainngs/types/SagaIterator' {

    declare module.exports: typeof SagaIterator
}
declare module 'redux-domainngs/types/Saga' {

    declare module.exports: typeof Saga
}
declare module 'redux-domainngs/types/ActionSagaMap' {

    declare module.exports: typeof ActionSagaMap
}
declare module 'redux-domainngs/types/ActionReducerMap' {

    declare module.exports: typeof ActionReducerMap
}
declare module 'redux-domainngs/types/ActionReducerOrSagaMap' {


    declare module.exports: typeof ActionReducerOrSagaMap
}
declare module 'redux-domainngs/utils/pickBy' {

    declare export default function pickBy<T>(
        obj: ActionReducerOrSagaMap,
        fn: (val: any) => boolean): {
        [actionType: string]: T
    }
}
declare module 'redux-domainngs/errors/createBadUsageError' {
    declare export default function createBadUsageError(message: string): any
}
declare module 'redux-domainngs/Domain' {




    declare module.exports: typeof Domain
}
declare module 'redux-domainngs/types/DomainKeyActionReducerMap' {

    declare module.exports: typeof DomainKeyActionReducerMap
}
declare module 'redux-domainngs/types/DomainKeyDefaultStateMap' {
    declare module.exports: typeof DomainKeyDefaultStateMap
}
declare module 'redux-domainngs/types/ActionSagaDefinition' {

    declare module.exports: typeof ActionSagaDefinition
}
declare module 'redux-domainngs/types/ActionSagaDefinitions' {

    declare module.exports: typeof ActionSagaDefinitions
}
declare module 'redux-domainngs/types/KeyDomainMap' {

    declare module.exports: typeof KeyDomainMap
}
declare module 'redux-domainngs/DomainManager' {





    declare export type RootState<T>= "NO PRINT IMPLEMENTED: MappedType";
    declare export default class DomainManager<T, RS>{
        domains: T;
        store: Store<any>;
        constructor(domains: T): this;
        rootState: RS;
        resetAllStores(): void;
        getReducers(): DomainKeyActionReducerMap;
        getDefaultStates(): DomainKeyDefaultStateMap;
        getSagas(): ActionSagaDefinitions
    }
}
declare module 'redux-domainngs/emptyObject' {
    declare var val: any;
    declare module.exports: typeof val
}
declare module 'redux-domainngs/models/ActionInterface' {

    declare export default class ActionInterface<Payload, Meta>{
        action: FluxStandardAction<Payload,
        Meta>;
        dispatch: () => void;
        dispatchSync: () => Promise<any >
    }
}
declare module 'redux-domainngs/models/ActionInterfaceMockAction' {


    declare var _default: (
        payload?: any,
        meta?: any,
        error?: boolean) => ActionInterfaceMockAction<any, any>;
    declare module.exports: typeof _default
    declare export class ActionInterfaceMockAction<Payload, Meta>mixins ActionInterface<Payload, Meta>{
        action: FluxStandardAction<Payload,
        Meta>;
        dispatch(): void;
        dispatchSync(): Promise<any>;
        constructor(payload: Payload, meta: Meta, error: boolean): this
    }
}
declare module 'redux-domainngs/types/ActionWithCallbacks' {

    declare export type ResolveFunction = (data: any) => void;
    declare export type RejectFunction = (data: Error) => void;
    declare export interface Callbacks {
        resolve: ResolveFunction,
            reject: RejectFunction
    }
    declare export interface MetaWithCallbacks {
        callbacks: Callbacks
    }
    declare export type ActionWithCallbacks<Payload, Meta>= {
        meta: Meta & MetaWithCallbacks
    } & FluxStandardAction

}
declare module 'redux-domainngs/decorators/internal/createActionInterfaceCreator' {


    declare export default function INVALID NAME REF(
        target: Domain<any>,
        actionType: string,
        actionCreator: Function): (...args: any[]) => ActionInterface<any, any >
}
declare module 'redux-domainngs/decorators/action' {

    declare export default function INVALID NAME REF(
        target: Domain<any>,
        actionType: string,
        actionCreator: Function): (...args: any[]) => ActionInterface<any, any >
}
declare module 'redux-domainngs/types/SmartReducer' {

    declare module.exports: typeof SmartReducer
}
declare module 'redux-domainngs/decorators/internal/setActionReducerHandler' {

    declare var _default:<State>(
        target: any,
        actionType: string,
        reducerFunction: SmartReducer<any, any>) => void;
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/decorators/reducerAction' {


    declare var _default:<State>(
        actionType: string,
        reducerFunction: SmartReducer<any, any>) => (
        target: Domain<any>,
        key: string,
        descriptor: PropertyDescriptor) => PropertyDescriptor;
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/types/SmartSagaFootprint' {


    declare module.exports: typeof SmartSagaFootprint
}
declare module 'redux-domainngs/decorators/internal/setActionSagaHandler' {

    declare var _default: (
        target: any,
        actionType: string,
        sagaGeneratorFunction: SmartSagaFootprint<any>) => void;
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/decorators/sagaAction' {


    declare var _default: (
        actionType: string,
        sagaGeneratorFunction: SmartSagaFootprint<any>) => (
        target: Domain<any>,
        key: string,
        descriptor: PropertyDescriptor) => PropertyDescriptor;
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/helpers/getCallbackOptionsFromAction' {


    declare var _default: (
        action: FluxStandardAction<any, MetaWithCallbacks>) => {
        resolve: (data: any) => void,
        reject: (data: Error) => void
    };
    declare module.exports: typeof _default
}
declare module 'redux-domain/node_modules/@types/Qs/index' {
    declare module.exports: typeof QueryString

    declare var npm$namespace$QueryString: {
        stringify: typeof QueryString$stringify,
        parse: typeof QueryString$parse,
    }
    declare interface QueryString$IStringifyOptions {
        delimiter?: string,
            strictNullHandling?: boolean,
            skipNulls?: boolean,
            encode?: boolean,
            encoder?: (str: string) => any,
            filter?: Array<string | number>| ((prefix: string, value: any) => any),
            arrayFormat?: indices | brackets | repeat,
            indices?: boolean
    }

    declare interface QueryString$IParseOptions {
        delimiter?: string | RegExp,
            depth?: number,
            decoder?: (str: string) => any,
            arrayLimit?: number,
            parseArrays?: boolean,
            allowDots?: boolean,
            plainObjects?: boolean,
            allowPrototypes?: boolean,
            parameterLimit?: number,
            strictNullHandling?: boolean
    }

    declare function QueryString$stringify(obj: any, options?: QueryString$IStringifyOptions): string

    declare function QueryString$parse(str: string, options?: QueryString$IParseOptions): any
}
declare module 'redux-domainngs/api-request-pool/errors/request-error-type' {
    declare module.exports: typeof RequestErrorType
}
declare module 'redux-domainngs/api-request-pool/errors/request-error' {


    declare export default class RequestError mixins Error {
        problem: RequestErrorType;
        innerError: Error;
        axiosResponse: AxiosResponse;
        constructor(problem: RequestErrorType, innerError?: Error, axiosResponse?: AxiosResponse): this
    }
}
declare module 'redux-domainngs/api-request-pool/errors/wrapped-error' {
    declare export default class WrappedError {
        originalError: Error;
        handled: boolean;
        constructor(originalError: Error, handled: boolean): this
    }
}
declare module 'redux-domainngs/api-request-pool/errors/api-error' {

    declare export default class ApiError mixins RequestError {
        apiError: any;
        constructor(apiError: any): this
    }
}
declare module 'redux-domainngs/api-request-pool/errors/express-js-proxy-error' {
    declare export type ExpressJsProxyError = {
        address: string,
        family: string | null,
        host: string,
        code: string,
        errno: string,
        port: string,
        syscall: string
    } & Error

    declare export function isExpressJsProxyError(obj: Object): ExpressJsProxyError
}
declare module 'redux-domainngs/api-request-pool/errors/timeout-error' {
    declare export type TimeoutError = {
        config: any,
        code: any,
        response: any
    } & Error

    declare export function isTimeoutError(err: any): TimeoutError
}
declare module 'redux-domainngs/api-request-pool/errors/connection-error' {
    declare export type ConnectionError = {
        code: string,
        errno: number | string,
        syscall: string,
        hostname: string,
        host: string,
        port: number,
        config: any,
        response: any
    } & Error

    declare export function isNodeJsConnectionError(err: any): ConnectionError
}
declare module 'redux-domainngs/api-request-pool/errors/server-status-error' {
    declare export type ServerStatusError = {
        config: any,
        response: any
    } & Error

    declare export function isServerStatusError(err: any): ServerStatusError
}
declare module 'redux-domainngs/api-request-pool/errors/network-error' {

    declare export type NetworkError = {
        config: AxiosRequestConfig,
        response: any,
        AxiosResponse: any
    } & Error

    declare export function isNetworkError(obj: any): NetworkError
}
declare module 'redux-domainngs/api-request-pool/models/api-response' {
    declare export interface ApiResponse {
        success: boolean,
            data: any,
            errors: any[]
    }
    declare export function isValidResponseJsonStructure(obj: any): ApiResponse
}
declare module 'redux-domainngs/api-request-pool/api-request-pool' {

    declare export type METHOD = get | post;
    declare export interface Request {
        url?: string,
            method?: METHOD,
            data?: any,
            headers?: {
                [headerName: string]: any
            }
    }
    declare export interface Response {
        body?: any,
            status?: number,
            headers?: {
                [headerName: string]: any
            }
    }
    declare export type ErrorHandler = (err: RequestError) => boolean;
    declare export type LogHandler = (request: Request, response: Response, duration: number) => void;
    declare export type ApiRequestPoolOptions = {
        baseURL?: string,
        errorHandler?: ErrorHandler,
        logHandler?: LogHandler,
        timeout?: number,
        nodeRequest?: any
    };
    declare export type ApiRequestOptions = {
        cancelPrev?: boolean,
        uniqueRequestHasher?: (req: {
            method: METHOD,
            url: string,
            rawData: any
        }) => string
    };
    declare export default class ApiRequestPool {
        options: ApiRequestPoolOptions;
        constructor(options?: ApiRequestPoolOptions): this;
        request(
            method: METHOD,
            url: string,
            rawData?: any,
            options?: ApiRequestOptions): Promise<any >
    }
}
declare module 'redux-domainngs/helpers/createReducer' {



    declare var _default: (
        domainActionReducerMap: DomainKeyActionReducerMap,
        domainDefaultStates: DomainKeyDefaultStateMap,
        mergeReducersMapObject?: ReducersMapObject) =><A>(state: {}, action: A) => {};
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/helpers/createReducerImmutable' {



    declare var _default: (
        domainActionReducerMap: DomainKeyActionReducerMap,
        domainDefaultStates: DomainKeyDefaultStateMap,
        mergeReducersMapObject?: ReducersMapObject) =><A>(state: {}, action: A) => {};
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/helpers/createSagaFork' {
    declare var _default: (actionType: string, innerGenerator: any) => any;
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/helpers/createRootSaga' {


    declare var _default: (
            sagas: ActionSagaDefinition[],
            additionalForks?: IterableIterator<effects.TakeEffect<any >
            |
            effects.PutEffect<any >
            |
            effects.RaceEffect |
            effects.CallEffect |
            effects.CpsEffect |
            effects.ForkEffect |
            effects.JoinEffect |
            effects.CancelEffect |
            effects.SelectEffect |
            effects.ActionChannelEffect<any >
            |
            effects.CancelledEffect |
            Effect[]>[]) => () => IterableIterator<IterableIterator<effects.TakeEffect<any >
        |
        effects.PutEffect<any >
        |
        effects.RaceEffect |
        effects.CallEffect |
        effects.CpsEffect |
        effects.ForkEffect |
        effects.JoinEffect |
        effects.CancelEffect |
        effects.SelectEffect |
        effects.ActionChannelEffect<any >
        |
        effects.CancelledEffect |
        Effect[] >> ;
    declare module.exports: typeof _default
}
declare module 'redux-domainngs/UserState' {



    declare export interface UserStoreOptions {
        reducer?: Reducer<any>,
            preloadedState?: any,
            middlewares?: Middleware[],
            enhancers?: StoreEnhancer<any>[],
            reduxDevToolsCompose?: boolean,
            reactotron?: boolean,
            rootSaga?: () => SagaIterator
    }
    declare export default class UserStore<DM>{
        domainManager: DM;
        store: Store<any>;
        constructor(options?: UserStoreOptions, domainManager?: DM): this;
        startRootSaga(): void;
        finalizeSaga(restart?: boolean): Promise<any >
    }
}
declare module 'redux-domainngs/index' {













}